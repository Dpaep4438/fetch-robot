// @flow

declare class Class0 {
  static error(): Class0;
  static redirect(url: string, status?: number): Class0;

  body: ?ReadableStream;
  bodyUsed: boolean;
  headers: Headers;
  ok: boolean;
  redirected: boolean;
  status: number;
  statusText: string;
  trailer: Promise<Headers>;
  type: "basic" | "cors" | "default" | "error" | "opaque" | "opaqueredirect";
  url: string;
  arrayBuffer(): Promise<ArrayBuffer>;
  blob(): Promise<Blob>;
  clone(): Class0;
  constructor(input?: ?string | URLSearchParams | FormData | Blob | ArrayBuffer | $TypedArray | DataView, init?: {headers?: Headers | {[key: string]: string}, status?: number, statusText?: string}): void;
  formData(): Promise<FormData>;
  json(): Promise<any>;
  text(): Promise<string>;
}
declare export var STANDARD_REQUEST_HEADERS: [string, string, string, string];
declare export var STANDARD_RESPONSE_HEADERS: [string, string, string, string, string, string];
declare export var WILDCARD: string;
declare export function connect(_: $Exact<{url: string}>): $Exact<{fetch: (url: string, options: ?{body?: ?string | any | any | any | any | any, cache?: ?string, credentials?: ?string, headers?: ?any, integrity?: ?string, method?: ?string, mode?: ?string, redirect?: ?string, referrer?: ?string}) => any}>;
declare export function destroyAll<Class0>(): void;
declare export function serve(_?: $Exact<{allow: Array<{domain?: ?string | any | Array<string>, headers?: ?string | any | Array<string>, method?: ?string | any | Array<string>, options?: ?string | any | Array<string>, origin?: ?string | any | Array<string>, path?: ?string | any | Array<string>, query?: ?string | any | Array<string>, responseHeaders?: ?string | any | Array<string>}>}>): {cancel: () => void};
